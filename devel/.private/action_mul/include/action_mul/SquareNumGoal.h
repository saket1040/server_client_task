// Generated by gencpp from file action_mul/SquareNumGoal.msg
// DO NOT EDIT!


#ifndef ACTION_MUL_MESSAGE_SQUARENUMGOAL_H
#define ACTION_MUL_MESSAGE_SQUARENUMGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace action_mul
{
template <class ContainerAllocator>
struct SquareNumGoal_
{
  typedef SquareNumGoal_<ContainerAllocator> Type;

  SquareNumGoal_()
    : max_sq_number(0)
    , wait_duration(0.0)  {
    }
  SquareNumGoal_(const ContainerAllocator& _alloc)
    : max_sq_number(0)
    , wait_duration(0.0)  {
  (void)_alloc;
    }



   typedef int64_t _max_sq_number_type;
  _max_sq_number_type max_sq_number;

   typedef double _wait_duration_type;
  _wait_duration_type wait_duration;





  typedef boost::shared_ptr< ::action_mul::SquareNumGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::action_mul::SquareNumGoal_<ContainerAllocator> const> ConstPtr;

}; // struct SquareNumGoal_

typedef ::action_mul::SquareNumGoal_<std::allocator<void> > SquareNumGoal;

typedef boost::shared_ptr< ::action_mul::SquareNumGoal > SquareNumGoalPtr;
typedef boost::shared_ptr< ::action_mul::SquareNumGoal const> SquareNumGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::action_mul::SquareNumGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::action_mul::SquareNumGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::action_mul::SquareNumGoal_<ContainerAllocator1> & lhs, const ::action_mul::SquareNumGoal_<ContainerAllocator2> & rhs)
{
  return lhs.max_sq_number == rhs.max_sq_number &&
    lhs.wait_duration == rhs.wait_duration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::action_mul::SquareNumGoal_<ContainerAllocator1> & lhs, const ::action_mul::SquareNumGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace action_mul

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::action_mul::SquareNumGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::action_mul::SquareNumGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::action_mul::SquareNumGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::action_mul::SquareNumGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::action_mul::SquareNumGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::action_mul::SquareNumGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::action_mul::SquareNumGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a923de72443fd852afda9c9f98879218";
  }

  static const char* value(const ::action_mul::SquareNumGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa923de72443fd852ULL;
  static const uint64_t static_value2 = 0xafda9c9f98879218ULL;
};

template<class ContainerAllocator>
struct DataType< ::action_mul::SquareNumGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "action_mul/SquareNumGoal";
  }

  static const char* value(const ::action_mul::SquareNumGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::action_mul::SquareNumGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#goal\n"
"int64 max_sq_number\n"
"float64 wait_duration\n"
;
  }

  static const char* value(const ::action_mul::SquareNumGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::action_mul::SquareNumGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.max_sq_number);
      stream.next(m.wait_duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SquareNumGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::action_mul::SquareNumGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::action_mul::SquareNumGoal_<ContainerAllocator>& v)
  {
    s << indent << "max_sq_number: ";
    Printer<int64_t>::stream(s, indent + "  ", v.max_sq_number);
    s << indent << "wait_duration: ";
    Printer<double>::stream(s, indent + "  ", v.wait_duration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACTION_MUL_MESSAGE_SQUARENUMGOAL_H
